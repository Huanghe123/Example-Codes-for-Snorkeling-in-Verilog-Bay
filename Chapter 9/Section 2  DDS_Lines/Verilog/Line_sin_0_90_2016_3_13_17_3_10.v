/***********************************************
Module Name:   Line_sin_0_90_frame
Feature:       Approx. sin function by lines
               Frame only for calling by generater 
               (DO NOT modify the file)
               to create the .v file
               An example for the book
Coder:         Garfield
Organization:  xxxx Group, Department of Architecture
------------------------------------------------------
Input ports:   clk: System clock
               Reset: System reset
               address: angle value displayed by address
                        (0 for 0 degree, maximum for 90 degree)
Output Ports:  vlaue: DDS output value, signed
------------------------------------------------------
History:
03-11-2016: First Version by Garfield
03-11-2016: Verified by Line_sin_0_90_test
***********************************************/

module line_sin_0_90
#(parameter ADDRESS_WIDTH = 8,
//Bit width for phase counter and step 
parameter VALUE_WIDTH = 8
//Output value's bit width
)
  ( 
    input CLK,
    input RESET,
    input[ADDRESS_WIDTH - 1 - 1: 0] address,
    output reg[VALUE_WIDTH - 1 - 1 : 0] value
  );

//Defination for Varables in the module
integer loop;
//Loop variable

reg[ADDRESS_WIDTH - 1 - 2: 0] intra_address;
//Intra address for calculation
//Change 90 degree to 111....111
//Cut the MSB
reg[ADDRESS_WIDTH - 1 - 2: 0] intra_address_delay;
//Delay for ceofficients selelction

reg[VALUE_WIDTH - 1 : 0] ceo_a;
//Fixed point 1.VALUE_WIDTH
reg[VALUE_WIDTH - 2 : 0] ceo_b;
//Fixed point 0.VALUE_WIDTH
//Ceofficients for the lines

wire[VALUE_WIDTH - 1 + 1 + ADDRESS_WIDTH - 2 - 1: 0] long_value;
//Long function value without truncation
//Lenght: a * address
wire[VALUE_WIDTH:0] short_value;
//Truncation value

//definition JUDGEMENTS and Ceofficients Constant
//Application part: Insert DEFINITION OF JUDGEMENTS and Ceofficients Constant(DO NOT REMOVE!)
//Below code/s was/were generated by the application
reg [12 : 0] judgements;
wire [7 : 0] a[13 : 0];
wire [6 : 0] b[13 : 0];
wire [5 : 0] points[12 : 0];
//Above code/s was/were generated by the application

//Logicals
//Costant Tables
//Application part: Insert Constant Tables (DO NOT REMOVE!)
//Below code/s was/were generated by the application
//Ceofficients a and b
assign a[0] = 8'b11001000;
assign b[0] = 7'b0000000;
assign a[1] = 8'b11000111;
assign b[1] = 7'b0000001;
assign a[2] = 8'b11000110;
assign b[2] = 7'b0000001;
assign a[3] = 8'b11000101;
assign b[3] = 7'b0000001;
assign a[4] = 8'b11000011;
assign b[4] = 7'b0000001;
assign a[5] = 8'b11000001;
assign b[5] = 7'b0000001;
assign a[6] = 8'b10111110;
assign b[6] = 7'b0000010;
assign a[7] = 8'b10111001;
assign b[7] = 7'b0000011;
assign a[8] = 8'b10110011;
assign b[8] = 7'b0000101;
assign a[9] = 8'b10101011;
assign b[9] = 7'b0000111;
assign a[10] = 8'b10010110;
assign b[10] = 7'b0001111;
assign a[11] = 8'b01101100;
assign b[11] = 7'b0100110;
assign a[12] = 8'b00110100;
assign b[12] = 7'b1001111;
assign a[13] = 8'b00001010;
assign b[13] = 7'b1110110;

//Connect points between lines
assign points[0] = 6'b000011;
assign points[1] = 6'b000101;
assign points[2] = 6'b000111;
assign points[3] = 6'b001001;
assign points[4] = 6'b001011;
assign points[5] = 6'b001101;
assign points[6] = 6'b001111;
assign points[7] = 6'b010010;
assign points[8] = 6'b010101;
assign points[9] = 6'b011001;
assign points[10] = 6'b100011;
assign points[11] = 6'b101111;
assign points[12] = 6'b111100;
//Above code/s was/were generated by the application

//Value calculation on the line
assign long_value = ceo_a * intra_address_delay;
assign short_value = 
        long_value[VALUE_WIDTH - 1 + 1 + ADDRESS_WIDTH - 2 - 1 : ADDRESS_WIDTH - 2]
           +{1'b0, ceo_b};

always @ (posedge CLK or negedge RESET)
//Address adjust: 90 degree operation
begin
    if (!RESET)
    //Reset enable
    begin
        intra_address <= {(ADDRESS_WIDTH - 1){1'b0}};
    end
    else
    begin
        if (address[ADDRESS_WIDTH - 1 -1])
        //90 degree
        begin
            intra_address <= {(ADDRESS_WIDTH - 2){1'b1}};
            //To 111...111
        end
        else
        begin
            intra_address <= address[ADDRESS_WIDTH - 1 - 2: 0]; 
            //Keep original value       	
        end
    end
end

always @ (posedge CLK or negedge RESET)
//Address delay: waiting for ceofficients selection
begin
    if (!RESET)
    //Reset enable
    begin
        intra_address_delay <= {(ADDRESS_WIDTH - 1){1'b0}};
    end
    else
    begin
        intra_address_delay <= intra_address;
    end
end

always @ (posedge CLK or negedge RESET)
//Ceofficients selection
begin
    if (!RESET)
    //Reset enable
    begin
        ceo_a <= {(VALUE_WIDTH + 1){1'b0}};
        ceo_b <= {(VALUE_WIDTH ){1'b0}};
    end
    else
    begin
        case(judgements)
//Application part: Insert Ceofficient Selection codes (DO NOT REMOVE!)        	
//Below code/s was/were generated by the application
        	13'b1111111111111:
        	begin
        	    ceo_a <= a[0];
        	    ceo_b <= b[0];
        	end

        	13'b1111111111110:
        	begin
        	    ceo_a <= a[1];
        	    ceo_b <= b[1];
        	end

        	13'b1111111111100:
        	begin
        	    ceo_a <= a[2];
        	    ceo_b <= b[2];
        	end

        	13'b1111111111000:
        	begin
        	    ceo_a <= a[3];
        	    ceo_b <= b[3];
        	end

        	13'b1111111110000:
        	begin
        	    ceo_a <= a[4];
        	    ceo_b <= b[4];
        	end

        	13'b1111111100000:
        	begin
        	    ceo_a <= a[5];
        	    ceo_b <= b[5];
        	end

        	13'b1111111000000:
        	begin
        	    ceo_a <= a[6];
        	    ceo_b <= b[6];
        	end

        	13'b1111110000000:
        	begin
        	    ceo_a <= a[7];
        	    ceo_b <= b[7];
        	end

        	13'b1111100000000:
        	begin
        	    ceo_a <= a[8];
        	    ceo_b <= b[8];
        	end

        	13'b1111000000000:
        	begin
        	    ceo_a <= a[9];
        	    ceo_b <= b[9];
        	end

        	13'b1110000000000:
        	begin
        	    ceo_a <= a[10];
        	    ceo_b <= b[10];
        	end

        	13'b1100000000000:
        	begin
        	    ceo_a <= a[11];
        	    ceo_b <= b[11];
        	end

        	13'b1000000000000:
        	begin
        	    ceo_a <= a[12];
        	    ceo_b <= b[12];
        	end

        	13'b0000000000000:
        	begin
        	    ceo_a <= a[13];
        	    ceo_b <= b[13];
        	end

//Above code/s was/were generated by the application
        	
        	default:
        	begin
        	   ceo_a <= {(VALUE_WIDTH + 1){1'b0}};
               ceo_b <= {(VALUE_WIDTH ){1'b0}}; 
        	end
        endcase
    end
end

always @ (posedge CLK or negedge RESET)
//Function value output
begin
    if (!RESET)
    //Reset enable
    begin
        value <= {(VALUE_WIDTH - 1){1'b0}};
    end
    else
    begin
        value <= short_value[VALUE_WIDTH - 1 : 0];
        //Truncation: MSB and tails
    end
end

//Judgement for which line here is
always @(*)
begin
//Application part: Insert Comparisons (DO NOT REMOVE!)
//Below code/s was/were generated by the application
    for (loop = 0; loop < 13; loop = loop + 1)
    begin
        judgements[loop] <= (intra_address < points[loop]);
    end
//Above code/s was/were generated by the application
end

endmodule
