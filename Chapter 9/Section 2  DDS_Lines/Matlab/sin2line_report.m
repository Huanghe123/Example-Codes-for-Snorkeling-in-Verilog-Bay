function [ points, a, b, value_fixed] = sin2line_report( limit, Address_Width, Value_Width )
%Approx. sin function with lines: report
%   limit: maximum allowed error
%   Address_Width: LUT address bit width
%   Value_width: LUT Value bit width

%   points: fixed point changing points
%   a and b: fixed point ceofficients for the lines
%   value: fixed point values as a test vector
[ points, a, b, max_err, max_err_fixed, max_err_float, value_fixed] = sin2line2fixed( limit, Address_Width, Value_Width );

%Output on the monitor
fprintf('Report: Line approx. sin function\n');
fprintf( 'Address_Width = %d \n', Address_Width);
fprintf( 'Value_Width = %d \n', Value_Width);
fprintf('#line = %d \n', length(a));
fprintf( 'Maximum Error Value for float method = %d \n', max_err_float);
fprintf( 'Maximum Error Value between float method and fixed point = %d \n', max_err_fixed);
fprintf( 'Maximum Error Value in total = %d \n', max_err);
fprintf( 'Crossing point between lines\n');
fprintf('%x ', points);
fprintf( '\n');
fprintf( 'Ceofficient a\n');
fprintf( '%x ', a');
fprintf( '\n');
fprintf( 'Ceofficient b\n');
fprintf( '%x ', b');
fprintf( '\n');
fprintf( 'Calculation Values per address\n');
fprintf('%x ', value_fixed);
fprintf( '\n');

in = input ('Write to the files? (Y/N)','s');

if ( in == 'Y' || in == 'y')
    %Summary File Generate
    
    %File name
    time =clock;
    time_str ='';
    for i =1:6
        time_str = strcat(time_str,'_',num2str(floor(time(i))));
    end
    
    file_sum = 'sin2line_sum';
    file_sum = strcat(file_sum, time_str, '.txt');
    
    file = fopen(file_sum,'w');
    fprintf(file, 'Report: Line approx. sin function\n');
    fprintf(file, 'Address_Width = %d \n', Address_Width);
    fprintf(file, 'Value_Width = %d \n', Value_Width);
    fprintf(file, '#line = %d \n', length(a));
    fprintf(file, 'Maximum Error Value for float method = %d \n', max_err_float);
    fprintf(file, 'Maximum Error Value between float method and fixed point = %d \n', max_err_fixed);
    fprintf(file, 'Maximum Error Value in total = %d \n', max_err);
    fprintf(file, 'Crossing point between lines\n');
    fprintf(file,'%x ', points);
    fprintf(file, '\n');
    fprintf(file, 'Ceofficient a\n');
    fprintf(file, '%x ', a');
    fprintf(file, '\n');
    fprintf(file, 'Ceofficient b\n');
    fprintf(file, '%x ', b');
    fprintf(file, '\n');
    fprintf(file, 'Calculation Values per address\n');
    fprintf(file, '%x ', value_fixed);
    fclose(file);
    
    %Test Vector File
    file_tv = 'sin2line_test_vector';
    file_tv = strcat(file_tv, time_str, '.txt');
    hex_width = ceil(Value_Width / 4);
    file = fopen(file_tv,'w');
    for i = 1:length(value_fixed)
        fprintf(file, '%s\n', dec2hex(value_fixed(i), hex_width));
    end
    fclose(file);
    
    %Verilog File
    file_frame = 'Line_sin_0_90_frame.vf';
    file_verilog = strcat('Line_sin_0_90', time_str, '.v');
    file_r = fopen(file_frame,'r');
    file_w = fopen(file_verilog,'w');
    
    number_line = length(a);
    %number of lines to approx. sin
    
    while (0 == feof(file_r))
        str = fgetl(file_r);
        fprintf(file_w, '%s\n', str);
        %Read from the frame and copy to .v file
        
        if ( 0 ~= strfind(str,'Application part'))
            %Application generation Flag
            fprintf(file_w,'//Below code/s was/were generated by the application\n');
            if (0 ~= strfind(str,'DEFINITION OF JUDGEMENTS'))
                %Definition for variable judgement
                fprintf(file_w,'reg [%s : 0] judgements;\n', num2str(number_line-2));
                fprintf(file_w,'wire [%s : 0] a[%s : 0];\n', num2str(Value_Width), num2str(number_line-1));
                fprintf(file_w,'wire [%s : 0] b[%s : 0];\n', num2str(Value_Width-1), num2str(number_line-1));
                fprintf(file_w,'wire [%s : 0] points[%s : 0];\n', num2str(Address_Width-1), num2str(number_line-2));
            elseif (0 ~= strfind(str,'Constant Tables'))
                %Ceofficients a and b
                fprintf(file_w,'//Ceofficients a and b\n');
                for i = 1:number_line
                    fprintf(file_w,'assign a[%s] = %s''b%s;\n', num2str(i-1),num2str(Value_Width+1), dec2bin(a(i), Value_Width+1));
                    fprintf(file_w,'assign b[%s] = %s''b%s;\n', num2str(i-1),num2str(Value_Width), dec2bin(b(i), Value_Width));
                end
                
                %Connect points
                fprintf(file_w,'\n//Connect points between lines\n');
                for i = 1:number_line-1
                    fprintf(file_w,'assign points[%s] = %s''b%s;\n', num2str(i-1),num2str(Address_Width), dec2bin(points(i),Address_Width));
                end
            elseif(0 ~= strfind(str,'Insert Comparisons'))
                %Comparison with points for judgement which line here is
                fprintf(file_w,'    for (loop = 0; loop < %s; loop = loop + 1)\n', num2str(number_line - 1));
                fprintf(file_w,'    begin\n');
                fprintf(file_w,'        judgements[loop] <= (intra_address < points[loop]);\n');
                fprintf(file_w,'    end\n');
            elseif(0 ~= strfind(str,'Ceofficient Selection'))%Ceofficients Selection
                for i = 1: number_line
                    num_str = num2selstr(i, number_line);
                    fprintf(file_w,'        	%s''b%s:\n', num2str(number_line-1), num_str);
                    fprintf(file_w,'        	begin\n');
                    fprintf(file_w,'        	    ceo_a <= a[%s];\n', num2str(i-1));
                    fprintf(file_w,'        	    ceo_b <= b[%s];\n', num2str(i-1));
                    fprintf(file_w,'        	end\n\n');
                end
            else
                %Unknown Flag
                fprintf(file_w,'//ATTENTION, ATTENTION!\n');
                fprintf(file_w,'//The frame has be modified!\n');
                fprintf(file_w,'//Illegal codes might be inserted!\n');
            end
            
            fprintf(file_w,'//Above code/s was/were generated by the application\n');
        end
    end
    
    fclose(file_r);
    fclose(file_w);
end
end